@startuml Class
top to bottom direction

class Prenda {
    +Tipo
    +Material
    +ColorPrimario
    +ColorSecundario
    +Patron
    +Formalidad
    +TempMaxima
    +TempMinima

    +sirveEnTemperatura(temperatura)
}

enum Categoria {
    INFERIOR
    SUPERIOR
    CALZADO
    ACCESORIO
}

enum Tipo{
    CAMISA
    PANTALON
    etc
}

enum Patron {
    LUNARES
    RAYADA
    ESTAMPADA
    CUADROS
    LISA
}

enum Material {
    ALGODON
    LYCRA
    etc
}

class Usuario {
    +edad
    +Guardarropas
    +motorSugerencia

    +getPrendas()
}

enum Formalidad {
    FORMAL
    INFORMAL
    NEUTRA
}

abstract class MotorSugerencia {

    +generarSugerencia(usuario, prendas)
    #filtroPropio(usuario) {abstract}
}

class MotorSugerenciaTodas {
    #filtroPropio(usuario)
}

class MotorSugerenciaEdad {
    #filtroPropio(usuario)
}

class MotorSugerenciaClima {
    -servicioMeteorologico

    #filtroPropio(usuario)
}

interface ServicioMeteorologico {
    +getClima()
    +getAlertas()
}

class ServicioMeteorologicoCacheado {
   -periodoValidez
   -consultas
   -servicioMeteorologico
}

class ServicioMeteorologicoAccuWeather{
    -accuWeather
}

class EstadoClima {
    +temperatura
    +humedad
}

class RespuestaClima {
    +estadoClima
    +fechaExpiracion

    +isExpired()
}



class AccuWeatherApi {
    +getWeather(ciudad)
    +getAllerts(ciudad)
}



enum Humedad {
    ALTA
    BAJA
}

class Guardarropa {
    +prendas
    +colaboradores
}

abstract class SugerenciaPrenda {
    +sugeridor
    +prenda
    +guardarropa
    +estado

    +aceptar()
    +rechazar()
    #ejecutar() {abstract}
    #rollback() {abstract}
}

class SugerenciaAgregar {
    #ejecutar()
    #rollback()
}

class SugerenciaEliminar {
    #ejecutar()
    #rollback()
}

enum EstadoSugerencia {
    PENDIENTE
    ACEPTADA
    RECHAZADA
}

interface Accion {
    +notificar(usuario, alertas)
}

class ActualizarSugerencias {
    +notificar(usuario, alertas)
}

class MailsAlerta {
    +notificar(usuario, alertas)
}

class NotificarGranzio {
    +notificar(usuario, alertas)
}

class NotificarTormenta {
    +notificar(usuario, alertas)
}

interface MailSender {
    +send(address, message)
}

interface NotificationService {
    +notify(text)
}

enum Alertas {
    TORMENTA
    GRANIZO
}
class RespuestaAlertas {
    +alreta
    +tiempo
}

class Ciudad {
    +nombre
    +alertas
    +servicioMeteorologico

    +getAlertas()
    +updateAlertas()
}


Prenda *-- Patron
Prenda *-- Tipo
Prenda *-- Material
Prenda *-- Formalidad
Tipo *-- Categoria
Usuario *-- Prenda
Usuario ..> MotorSugerencia
MotorSugerencia <|-- MotorSugerenciaEdad
MotorSugerencia <|-- MotorSugerenciaTodas
MotorSugerencia <|-- MotorSugerenciaClima
MotorSugerenciaClima ..> ServicioMeteorologico
MotorSugerencia ..> Prenda
ServicioMeteorologico <|.. ServicioMeteorologicoAccuWeather
ServicioMeteorologico <|.. ServicioMeteorologicoCacheado
ServicioMeteorologicoCacheado *-- ServicioMeteorologico
ServicioMeteorologico --> EstadoClima
ServicioMeteorologicoCacheado ..> RespuestaClima
RespuestaClima *--EstadoClima
EstadoClima *-- Humedad
ServicioMeteorologicoAccuWeather ..> AccuWeatherApi

Usuario ..> Guardarropa
Guardarropa <.. SugerenciaPrenda
SugerenciaPrenda *-- EstadoSugerencia
SugerenciaPrenda <|-- SugerenciaAgregar
SugerenciaPrenda <|-- SugerenciaEliminar

Usuario ..> Accion
Accion <|-- ActualizarSugerencias
Accion <|-- MailsAlerta
Accion <|-- NotificarGranzio
Accion <|-- NotificarTormenta

MailsAlerta --> MailSender
NotificarGranzio ..> NotificationService
NotificarTormenta ..> NotificationService
Usuario ..> Ciudad
Ciudad ..> Alertas
ServicioMeteorologicoCacheado ..> RespuestaAlertas
RespuestaAlertas *-- Alertas
ServicioMeteorologico --> Alertas

@enduml